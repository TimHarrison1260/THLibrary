<common:LayoutAwarePage
    x:Name="pageRoot"
    x:Class="THLibrary.MainPage"
    DataContext="{Binding DefaultViewModel, RelativeSource={RelativeSource Self}}"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:THLibrary"
    xmlns:common="using:THLibrary.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:uc="using:THLibrary.CustomControls"
    xmlns:data="using:THLibrary.DataModel"
    mc:Ignorable="d">

    <Page.Resources>
        <!-- The various data sources used by the controls on this page. -->
        <CollectionViewSource
            x:Name="itemsViewSource"
            Source="{Binding Items}"
            d:Source="{Binding AllGroups, Source={d:DesignInstance Type=data:SampleDataSource, IsDesignTimeCreatable=True}}"/>
        <CollectionViewSource
            x:Name="searchesViewModel"
            Source="{Binding Searches}"
            d:Source="{Binding AllGroups, Source={d:DesignInstance Type=data:SampleDataSource, IsDesignTimeCreatable=True}}"/>
        <CollectionViewSource
            x:Name="currentSearchViewSource"
            Source="{Binding Current}"
            IsSourceGrouped="False"
            d:Source="{Binding AllGroups[0].Items, Source={d:DesignInstance Type=data:SampleDataSource, IsDesignTimeCreatable=True}}"/>
        
        <!-- style for the Callisto stuff on the App Bar. -->
        <Style x:Key="SaveAppBarButtonStyle" TargetType="Button" BasedOn="{StaticResource AppBarButtonStyle}">
            <Setter Property="AutomationProperties.AutomationId" Value="SaveAppBarButton"/>
            <Setter Property="AutomationProperties.Name" Value="Save Search"/>
            <Setter Property="Content" Value=""/>
        </Style>
        <Style x:Key="NewAppBarButtonStyle" TargetType="Button" BasedOn="{StaticResource AppBarButtonStyle}">
            <Setter Property="AutomationProperties.AutomationId" Value="NewAppBarButton"/>
            <Setter Property="AutomationProperties.Name" Value="New Search"/>
            <Setter Property="Content" Value=""/>
        </Style>
        <Style x:Key="ResetAppBarButtonStyle" TargetType="Button" BasedOn="{StaticResource AppBarButtonStyle}">
            <Setter Property="AutomationProperties.AutomationId" Value="NewAppBarButton"/>
            <Setter Property="AutomationProperties.Name" Value="Reset Results"/>
            <Setter Property="Content" Value=""/>
        </Style>


    </Page.Resources>

    <!--
        This grid acts as a root panel for the page that defines two rows:
        * Row 0 contains the back button and page title
        * Row 1 contains the rest of the page layout
    -->
    <Grid x:Name="GridContainer" Style="{StaticResource LayoutRootStyle}">
        <!--<Grid.DataContext>
            <data:LibrarySearchViewModel/>
        </Grid.DataContext>-->
        <Grid.RowDefinitions>
            <RowDefinition Height="140"/>
            <RowDefinition Height="Auto" x:Name="searchRow"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="610" x:Name="primaryColumn"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <!-- Back button and page title -->
        <Grid x:Name="titlePanel">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Button x:Name="backButton" Click="GoBack" IsEnabled="{Binding Frame.CanGoBack, ElementName=pageRoot}" Style="{StaticResource BackButtonStyle}"/>
            <TextBlock x:Name="pageTitle" Grid.Column="1" Style="{StaticResource PageHeaderTextStyle}" Text="Library Search..."/>
        </Grid>

        <Grid x:Name="searchesSelectPanel" Grid.Row="1" Margin="10,10,10,50" >
            <!-- Add the SelectSearch user control -->
            <StackPanel Orientation="Vertical" Margin="10,10,0,0">
                <TextBlock Text="Select a search from the saved searches." Margin="110,10,5,10" HorizontalAlignment="Left" Width="Auto" Style="{StaticResource ItemTextStyle}" />
                <!-- Make the binding one way for the Selector box so that we can disassociate the automatic updates which will cause problems when the Current Search is cleared -->
                <ComboBox x:Name="cbSelectSearch" Margin="110,10,5,10" HorizontalAlignment="Left" Width="Auto" 
                          ItemsSource="{Binding Source={StaticResource searchesViewModel}}" 
                          SelectedItem="{Binding SelectedItem}" 
                          SelectedIndex="{Binding SelectedIndex, Mode=OneWay}" 
                          DisplayMemberPath="Title" 
                          SelectionChanged="cbSelectSearch_SelectionChanged"/>
            </StackPanel>
        </Grid>

        <uc:CurrentSearchViewer Grid.Row="1"  Grid.Column="1" 
                                DataContext="{Binding Source={StaticResource currentSearchViewSource}}" 
                                ExecuteSearch="SearchViewer_Execute" />
        <!--    
        The above ExecuteSearch event of the CurrentSearchViewer Custom Control shows a compiler error
        in VS2012:  "The member ExecuteSearch is not recognised or is not accessible".  This appears to 
        be a bug with VS2012, as the code executes correctly, handling the event as raised by the Custom control.  
        
        Website: 'http://leventoz.wordpress.com/2012/03/11/moving-a-windows-phone-app-to-windows-8-a-case-study-part-2/'
        indicates this is a VS2012 issue.  In fact, closing ALL the xaml file, cleaning the project and then rebuilding
        it clears the problems.
        
        See 'http://forum.codecall.net/topic/72017-vs-2012-bug/#axzz2GTddwo4r' comments.
        -->
        
        <ListView 
            x:Name="resultsListView"
            Grid.Row="2"
            ItemsSource="{Binding Source={StaticResource itemsViewSource}}"
            Margin="-10,10,0,0"
            Padding="120,0,0,60"
            IsSwipeEnabled="False">
            <ListView.ItemTemplate>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Padding="5,0,5,0" Text="{Binding Title, Mode=OneWay}"/>
                        <TextBlock Text="{Binding Author, Mode=OneWay}"/>
                    </StackPanel>
                </DataTemplate>
            </ListView.ItemTemplate>
            <!--ItemsSource="{Binding Books}"-->
            <!--SelectedIndex="{Binding SelectedBookIndex,Mode=TwoWay}">-->
            <!--ItemTemplate="{StaticResource Standard130ItemTemplate}">-->
            <!--SelectionChanged=""-->
        </ListView>

        <ScrollViewer
            x:Name="BookScrollView"
            Grid.Row="2"
            Grid.Column="1">
            <!-- Add the user control for the book Details -->
            <uc:BookViewer DataContext="{Binding SelectedItem, ElementName=resultsListView}" Margin="10,10,0,0"/>
            <!--<uc:BookViewer DataContext="{Binding CurrentBook}" Margin="10,10,0,0"/>-->
        </ScrollViewer>


        <VisualStateManager.VisualStateGroups>

            <!-- Visual states reflect the application's view state -->
            <VisualStateGroup x:Name="ApplicationViewStates">
                <VisualState x:Name="FullScreenLandscape"/>
                <VisualState x:Name="Filled"/>

                <!-- The entire page respects the narrower 100-pixel margin convention for portrait -->
                <VisualState x:Name="FullScreenPortrait">
                    <Storyboard>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="backButton" Storyboard.TargetProperty="Style">
                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource PortraitBackButtonStyle}"/>
                        </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                </VisualState>

                <!-- The back button and title have different styles when snapped -->
                <VisualState x:Name="Snapped">
                    <Storyboard>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="backButton" Storyboard.TargetProperty="Style">
                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource SnappedBackButtonStyle}"/>
                        </ObjectAnimationUsingKeyFrames>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="pageTitle" Storyboard.TargetProperty="Style">
                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource SnappedPageHeaderTextStyle}"/>
                        </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
    </Grid>
    
    <Page.TopAppBar>
        <AppBar x:Name="PageAppBar" Padding="10,0,10,0">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="50*"/>
                    <ColumnDefinition Width="50*"/>
                </Grid.ColumnDefinitions>
                <StackPanel x:Name="LeftCommands" Orientation="Horizontal" Grid.Column="0" HorizontalAlignment="Left">
                    <Button x:Name="NewSearchButton" HorizontalAlignment="Left" Style="{StaticResource NewAppBarButtonStyle}" 
                            Click="OnNewSearchButtonClicked" />
                    <Button x:Name="SaveButton" HorizontalAlignment="Left" Style="{StaticResource SaveAppBarButtonStyle}" 
                            Click="OnSaveSearchButtonClicked" />
                    <Button x:Name="ResetButton" HorizontalAlignment="Left" Style="{StaticResource ResetAppBarButtonStyle}" 
                            Click="OnResetButtonClicked" />
                </StackPanel>
                <StackPanel x:Name="RightCommands" Orientation="Horizontal" Grid.Column="1" HorizontalAlignment="Right">
                </StackPanel>
            </Grid>
        </AppBar>
    </Page.TopAppBar>
    
</common:LayoutAwarePage>
