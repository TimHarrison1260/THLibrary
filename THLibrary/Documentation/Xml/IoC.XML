<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IoC</name>
    </assembly>
    <members>
        <member name="T:IoC.Configuration">
            <summary>
            Class <c>Configuration</c> is responsible for the runtime 
            configuration of the Unity IoC Container.  Within this
            IoC project, it will register the types for the Core
            and Infrastructure projects.  This avoids having to 
            reference the Infrastructure project from the THLivrary
            which would cause a circular reference.
            </summary>
            <remarks>
            A Unity LifetimeManager is used to manage the lifetime of 
            the instances of the Library and Search data models, which
            are instances of the UnitOfWork, so that the same instance
            is used by all references to it.  It effectively ensures
            that the Library and Search data classes are singletons.
            </remarks>
        </member>
        <member name="M:IoC.Configuration.RegisterTypes(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Register the types to be injected using the Unity IoC
            </summary>
            <param name="container">The singleton instance of the IoC container</param>
            <remarks>
            This methos resolves the dependencies for all components within 
            the layers, other than the UI layer.  There is an additional RegisterTypes
            method within the UI layer, which resolves dependencies entirely within
            the UI layer.
            </remarks>
        </member>
        <member name="T:IoC.NamespaceDoc">
            <summary>
            Namespace <c>IoC</c> is responsible for the configuration of the 
            Dependency Injection (DI) configuration.
            </summary>
            <remarks>
            <para>
            It is kept as a separate project so that all layers in the application
            can adhere to the architectural pattern known as the 'Onion Model'.
            A layer can only depend on componenetsthat are closer the core
            However, the UI layer depends on the Core layer for the infrastructure
            componenets like repositories, and needs access to the concrete implementation 
            of those repositories.
            </para>
            <para>
            see <a href="http://jeffreypalermo.com/blog/the-onion-architecture-part-1/.">jeffreypalermo.com.</a>
            </para>
            <para>
            The entire model is surrounded by a "Dependency Resolution" layer, which
            is implemented here with this Namespace, where such dependencies on the 
            infrastructure are injected at runtime.
            </para>
            <para>
            This application makes use of Microsoft Unity to provide the DI.  The specific
            version is 3.0.1208-Preview, which is a pre-release version and the only 
            version that works with Windows Store App (targetFramework is "winrt45").
            </para>
            </remarks>
        </member>
    </members>
</doc>
